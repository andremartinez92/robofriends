{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Header.js","components/SearchBox.js","components/ScrollableSection.js","components/ErrorBoundary.js","logic/filterRobotsBySearch.js","containers/RobotsScreen.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","email","id","name","className","alt","src","CardList","robots","Fragment","map","robot","key","Header","SearchBox","onSearchChange","onChange","placeholder","type","styles","overflow","height","ScrollableSection","children","style","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","filterRobotsBySearch","search","filter","toLowerCase","includes","RobotsScreen","useState","setRobots","searchField","setSearchField","useEffect","a","fetch","response","json","fetchData","filteredRobots","event","target","value","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wCCMSC,MAdf,SAAcC,GAAe,IACnBC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,GAAIC,EAASH,EAATG,KAEnB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BJ,EAA1B,cACrB,6BACE,4BAAKC,GACL,2BAAIF,MCWGM,MAjBf,SAAkBP,GAAe,IACvBQ,EAAWR,EAAXQ,OAER,OACE,kBAAC,IAAMC,SAAP,KACGD,EAAOE,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,CACEC,IAAKD,EAAMT,GACXD,MAAOU,EAAMV,MACbC,GAAIS,EAAMT,GACVC,KAAMQ,EAAMR,YCdPU,MAJf,WACE,OAAO,wBAAIT,UAAU,MAAd,gBCkBMU,MAff,SAAmBd,GAAe,IACxBe,EAAmBf,EAAnBe,eAER,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,SAAUD,EACVE,YAAY,gBACZC,KAAK,aCbPC,EAAS,CACbC,SAAU,SACVC,OAAQ,SAYKC,MALf,SAA2BtB,GAAe,IAChCuB,EAAavB,EAAbuB,SACR,OAAO,yBAAKC,MAAOL,GAASI,I,oCCkBfE,E,YApBb,WAAYzB,GAAe,IAAD,8BACxB,4CAAMA,KACD0B,MAAQ,CACXC,UAAU,GAHY,E,+EAORC,EAAYC,GAC5BC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,gEAGFG,KAAK9B,MAAMuB,a,GAjBMS,IAAMC,WCCnBC,MATf,SACE1B,EACA2B,GAEA,OAAO3B,EAAO4B,QAAO,SAACzB,GAAD,OACnBA,EAAMR,KAAKkC,cAAcC,SAASH,EAAOE,mBCmC9BE,MA/Bf,WAAyB,IAAD,EACMP,IAAMQ,SAAsB,IADlC,mBACfhC,EADe,KACPiC,EADO,OAEgBT,IAAMQ,SAAS,IAF/B,mBAEfE,EAFe,KAEFC,EAFE,KAItBX,IAAMY,WAAU,WAAM,4CACpB,8BAAAC,EAAA,sEACyBC,MACrB,8CAFJ,cACQC,EADR,gBAIuBA,EAASC,OAJhC,OAIQxC,EAJR,OAKEiC,EAAUjC,GALZ,4CADoB,uBAAC,WAAD,wBASpByC,KACC,IAEH,IAAMC,EAA8BhB,EAAqB1B,EAAQkC,GAEjE,OACE,yBAAKtC,UAAU,MACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,eAAgB,SAAAoC,GAAK,OAAIR,EAAeQ,EAAMC,OAAOC,UAChE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU7C,OAAQ0C,QC7B5BI,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,ST2HpD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.32df2757.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  email: string,\n  id: number,\n  name: string,\n};\n\nfunction Card(props: Props) {\n  const { email, id, name } = props;\n\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","// @flow\n\nimport React from 'react';\n\nimport { type RobotData } from '../types';\n\nimport Card from './Card';\n\ntype Props = {\n  robots: RobotData[],\n};\n\nfunction CardList(props: Props) {\n  const { robots } = props;\n\n  return (\n    <React.Fragment>\n      {robots.map(robot => (\n        <Card\n          key={robot.id}\n          email={robot.email}\n          id={robot.id}\n          name={robot.name}\n        />\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport default CardList;\n","// @flow\n\nimport React from 'react';\n\nfunction Header() {\n  return <h1 className=\"f1\">Robofriends</h1>;\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  onSearchChange: Function,\n};\n\nfunction SearchBox(props: Props) {\n  const { onSearchChange } = props;\n\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        onChange={onSearchChange}\n        placeholder=\"Search robots\"\n        type=\"search\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","// @flow\n\nimport React from 'react';\n\nconst styles = {\n  overflow: 'scroll',\n  height: '800px',\n};\n\ntype Props = {\n  children: React$Element<*>,\n};\n\nfunction ScrollableSection(props: Props) {\n  const { children } = props;\n  return <div style={styles}>{children}</div>;\n}\n\nexport default ScrollableSection;\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  children: React$Element<*>,\n};\n\ntype State = {\n  hasError: boolean,\n};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error: any, info: any) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. Something went wrong here.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","// @flow\n\nimport { type RobotData } from '../types';\n\nfunction filterRobotsBySearch(\n  robots: RobotData[],\n  search: string\n): RobotData[] {\n  return robots.filter((robot: RobotData) =>\n    robot.name.toLowerCase().includes(search.toLowerCase())\n  );\n}\n\nexport default filterRobotsBySearch;\n","// @flow\n\nimport React from 'react';\n\nimport './RobotsScreen.css';\nimport { type RobotData } from '../types';\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport ScrollableSection from '../components/ScrollableSection';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport filterRobotsBySearch from '../logic/filterRobotsBySearch';\n\nfunction RobotsScreen() {\n  const [robots, setRobots] = React.useState<RobotData[]>([]);\n  const [searchField, setSearchField] = React.useState('');\n\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const robots = await response.json();\n      setRobots(robots);\n    }\n\n    fetchData();\n  }, []);\n\n  const filteredRobots: RobotData[] = filterRobotsBySearch(robots, searchField);\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox onSearchChange={event => setSearchField(event.target.value)} />\n      <ScrollableSection>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </ScrollableSection>\n    </div>\n  );\n}\n\nexport default RobotsScreen;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport RobotsScreen from './containers/RobotsScreen';\n\nReactDOM.render(<RobotsScreen />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}