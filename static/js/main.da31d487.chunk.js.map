{"version":3,"sources":["middleware/constants.js","middleware/reducers.js","components/Card.js","components/CardList.js","components/Header.js","components/SearchBox.js","components/ScrollableSection.js","components/ErrorBoundary.js","helpers/filterRobotsBySearch.js","containers/RobotsScreen.js","middleware/actions.js","App.js","serviceWorker.js","index.js"],"names":["GET_ROBOTS_TYPES","searchInitialState","searchField","getRobotsInitialState","isPending","robots","error","rootReducer","combineReducers","search","state","action","type","payload","Card","props","email","id","name","className","alt","src","CardList","Fragment","map","robot","key","Header","SearchBox","onSearchChange","onChange","event","target","value","placeholder","styles","overflow","height","ScrollableSection","children","style","ErrorBoundary","hasError","info","this","setState","React","Component","filterRobotsBySearch","filter","toLowerCase","includes","RobotsScreen","dispatch","useDispatch","useSelector","useEffect","fetch","then","response","json","data","catch","filteredRobots","changeSearchField","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","f","store","createStore","compose","applyMiddleware","thunkMiddleware","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.da31d487.chunk.js","sourcesContent":["// @flow\n\ntype RequestTypes = {\n  REQUEST: string,\n  SUCCESS: string,\n  FAILURE: string,\n};\n\nexport const CHANGE_SEARCH_FIELD_TYPE: string = 'CHANGE_SEARCH_FIELD';\n\nexport const GET_ROBOTS_TYPES: RequestTypes = {\n  REQUEST: 'GET_ROBOTS_REQUEST',\n  SUCCESS: 'GET_ROBOTS_SUCCESS',\n  FAILURE: 'GET_ROBOTS_FAILURE',\n};\n","// @flow\n\nimport { type Action, type RobotData } from '../types';\nimport { CHANGE_SEARCH_FIELD_TYPE, GET_ROBOTS_TYPES } from './constants';\nimport { combineReducers } from 'redux';\n\ntype SearchRobotsState = {\n  searchField: string,\n};\n\nconst searchInitialState: SearchRobotsState = {\n  searchField: '',\n};\n\nexport function searchRobotsReducer(\n  state: SearchRobotsState = searchInitialState,\n  action: Action = {}\n): SearchRobotsState {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD_TYPE:\n      return { ...state, searchField: action.payload.searchField };\n\n    default:\n      return state;\n  }\n}\n\ntype RobotsState = {\n  isPending: boolean,\n  robots: Array<RobotData>,\n  error: string,\n};\n\nconst getRobotsInitialState: RobotsState = {\n  isPending: false,\n  robots: [],\n  error: '',\n};\n\nexport function getRobotsReducer(\n  state: RobotsState = getRobotsInitialState,\n  action: Action = {}\n): RobotsState {\n  switch (action.type) {\n    case GET_ROBOTS_TYPES.REQUEST:\n      return { ...state, isPending: true };\n    case GET_ROBOTS_TYPES.SUCCESS:\n      return { ...state, robots: action.payload.robots, isPending: false };\n    case GET_ROBOTS_TYPES.FAILURE:\n      return { ...state, error: action.payload.error, isPending: false };\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({\n  search: searchRobotsReducer,\n  robots: getRobotsReducer,\n});\n\nexport default rootReducer;\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  email: string,\n  id: number,\n  name: string,\n};\n\nfunction Card(props: Props) {\n  const { email, id, name } = props;\n\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","// @flow\n\nimport React from 'react';\n\nimport { type RobotData } from '../types';\n\nimport Card from './Card';\n\ntype Props = {\n  robots: RobotData[],\n};\n\nfunction CardList(props: Props) {\n  const { robots } = props;\n\n  return (\n    <React.Fragment>\n      {robots.map(robot => (\n        <Card\n          key={robot.id}\n          email={robot.email}\n          id={robot.id}\n          name={robot.name}\n        />\n      ))}\n    </React.Fragment>\n  );\n}\n\nexport default CardList;\n","// @flow\n\nimport React from 'react';\n\nfunction Header() {\n  return <h1 className=\"f1\">Robofriends</h1>;\n}\n\nexport default Header;\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  onSearchChange: Function,\n};\n\nfunction SearchBox(props: Props) {\n  const { onSearchChange } = props;\n\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        onChange={event => onSearchChange(event.target.value)}\n        placeholder=\"Search robots\"\n        type=\"search\"\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","// @flow\n\nimport React from 'react';\n\nconst styles = {\n  overflow: 'scroll',\n  height: '800px',\n};\n\ntype Props = {\n  children: React$Element<*>,\n};\n\nfunction ScrollableSection(props: Props) {\n  const { children } = props;\n  return <div style={styles}>{children}</div>;\n}\n\nexport default ScrollableSection;\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  children: React$Element<*>,\n};\n\ntype State = {\n  hasError: boolean,\n};\n\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error: any, info: any) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. Something went wrong here.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","// @flow\n\nimport { type RobotData } from '../types';\n\nfunction filterRobotsBySearch(\n  robots: RobotData[],\n  search: string\n): RobotData[] {\n  return robots.filter((robot: RobotData) =>\n    robot.name.toLowerCase().includes(search.toLowerCase())\n  );\n}\n\nexport default filterRobotsBySearch;\n","// @flow\n\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport './RobotsScreen.css';\nimport { type RobotData } from '../types';\nimport CardList from '../components/CardList';\nimport Header from '../components/Header';\nimport SearchBox from '../components/SearchBox';\nimport ScrollableSection from '../components/ScrollableSection';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport filterRobotsBySearch from '../helpers/filterRobotsBySearch';\n\nimport { changeSearchField, getRobots } from '../middleware/actions';\n\nfunction RobotsScreen() {\n  const dispatch = useDispatch();\n\n  const searchField: string = useSelector(state => state.search.searchField);\n  const { isPending, robots } = useSelector(state => state.robots);\n\n  const setSearchField: Function = (searchField: string) =>\n    dispatch(changeSearchField(searchField));\n\n  React.useEffect(() => {\n    dispatch(getRobots());\n  }, [dispatch]);\n\n  const filteredRobots: RobotData[] = filterRobotsBySearch(robots, searchField);\n\n  return (\n    <div className=\"tc\">\n      <Header />\n      <SearchBox onSearchChange={setSearchField} />\n      {(isPending && <h1>Loading...</h1>) || (\n        <ScrollableSection>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </ScrollableSection>\n      )}\n    </div>\n  );\n}\n\nexport default RobotsScreen;\n","// @flow\n\nimport { type Dispatch } from 'redux';\nimport { CHANGE_SEARCH_FIELD_TYPE, GET_ROBOTS_TYPES } from './constants';\n\ntype Action = {\n  type: string,\n  payload: Object\n}\n\nexport function changeSearchField(searchField: string): Action {\n  return { type: CHANGE_SEARCH_FIELD_TYPE, payload: { searchField } };\n}\n\nexport function getRobots() {\n  return (dispatch: Dispatch) => {\n    dispatch({ type: GET_ROBOTS_TYPES.REQUEST, payload: {} });\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(data =>\n        dispatch({ type: GET_ROBOTS_TYPES.SUCCESS, payload: { robots: data } })\n      )\n      .catch(error =>\n        dispatch({ type: GET_ROBOTS_TYPES.FAILURE, payload: { error } })\n      );\n  };\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './App.css';\nimport rootReducer from './middleware/reducers';\nimport RobotsScreen from './containers/RobotsScreen';\n\nconst reduxDevTools = window.__REDUX_DEVTOOLS_EXTENSION__\n  ? window.__REDUX_DEVTOOLS_EXTENSION__()\n  : f => f;\n\nconst store: Object = createStore(\n  rootReducer,\n  compose(applyMiddleware(thunkMiddleware), reduxDevTools)\n);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RobotsScreen />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//@ flow\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}